        ;   ARM_C
        ;	Nekane Díaz Montoya	  870795	
		;	Jorge Hernández Aznar 872838
		AREA codigo, CODE,READONLY
		EXPORT matriz3x3_operar_ARM_C
		IMPORT matrizNxN_multiplicar_C
		PRESERVE8 {TRUE}

		ENTRY
matriz3x3_operar_ARM_C
			; PRÓLOGO
			STMDB 	SP!,{R4-R12,LR}	   ; Se guardan los registros antiguos y el link register para volver
			MOV		FP, SP
			SUB 	SP, SP, #72		   ; Se almacena espacio para las variables E y F, 36 bytes respectivamente

			MOV 	R6, R2		 ; r6 = @C
			MOV 	R7, R3  	 ; r7 = @D
			LDR 	R2,[FP,#40] ; R2 = @Resultado 
			ADD 	R4, SP, #40	 ; R4 = @E
			
			MOV 	R8, #0		 ; i = r8
			MOV 	R9, #0 		 ; R9 = 0 CTE

ini_for		CMP 	R8, #9
			BGE		end_for

		    STR 	R9, [R2, R8, LSL #2]
			STR 	R9, [R4, R8, LSL #2]

			ADD 	R8, R8, #1
			B ini_for

end_for					
			MOV 	R8, R0	 ; R8 = @A
			MOV 	R9, R1	 ; R9 = @B
			MOV 	R10, R2	 ; R10 = @Resultado

			; llamada a multiplicar(A,B,Resultado)
			BL		matrizNxN_multiplicar_C

			MOV 	R0, R6	 ; R0 = @C
			MOV 	R1, R7	 ; R1 = @D
			MOV 	R2, R4	 ; R2 = @E

		    ; llamada a multiplicar(C,D,E)
			BL		matrizNxN_multiplicar_C	

			; Trasponer (E, F) 
			MOV 	R5, SP	 ; R5 = @F
			MOV		R11, #12	
			
			; R0 = i = 0
			MOV 	R0, #0

trans_i_ini	; i < 3	
		    CMP 	R0, #3
			BGE		trans_i_end
			; R1 = j = 0
			MOV 	R1, #0

trans_j_ini ; j < 3
			CMP 	R1, #3
			BGE 	trans_j_end

			; @E = E + j*4 + i*12
			MUL 	R12, R11 ,R0 
			ADD 	R2, R12, R1, LSL #2
			LDR 	R3, [R4, R2]

			; @F = F + i*4 + j*12
			MUL		R12, R11, R1
			ADD 	R2, R12, R0, LSL #2
			STR 	R3, [R5, R2]

		   	ADD 	R1, R1, #1	; i++
			B		trans_j_ini
trans_j_end
			ADD 	R0, R0, #1	; j++
			B 		trans_i_ini
trans_i_end

			; Sumar(Resultado,F,Resultado) + Check terminos_no_cero

			; R10 = @Resultado 	R5 = @F

			MOV 	R0, #9	; R0 = terminos_no_cero
			MOV 	R1, #0	; R1 = #0	
			MOV 	R2, #0	; R2 = i

ini_f_suma	CMP 	R2, #9	
			BGE		end_f_suma

			LDR 	R3, [R5, R2, LSL #2] 	; R3 = F[i][j]
			LDR		R4, [R10, R2, LSL #2]	; R4 = Resultado[i][j]
			ADD		R3, R4, R3				
			CMP 	R3, R1					; if (Resultado[i][j] == 0)
			SUBEQ	R0, R0, #1			    ; 		terminos_no_cero--
			STR 	R3, [R10, R2, LSL #2]

			ADD 	R2, R2, #1
			B ini_f_suma

end_f_suma				
			; EPÍLOGO
			ADD 	SP, SP, #72
			LDMIA	SP!,{R4-R12,LR}
			BX		LR 

		END
        
        ;   ARM
		;	Nekane D�az Montoya	  870795	
		;	Jorge Hern�ndez Aznar 872838
		AREA codigo, CODE,READONLY
		EXPORT matriz3x3_operar_ARM
		PRESERVE8 {TRUE}

		ENTRY
matriz3x3_operar_ARM
			; PR�LOGO
			STMDB 	SP!,{R4-R12,LR}	   ; Se guardan los registros antiguos y el link register para volver
			MOV 	FP, SP		
			LDR 	R4,[FP,#40] 	   ; R4 = @Resultado 
		
			; multiplicar(A,B,Resultado) and multiplicar(C,D,E)
			MOV 	R10, #12
			MOV 	R14, #9
			; for (i = 2; i >= 0; i--)
			MOV		R6, #2		; R6 = i = 2			
ini_f_i_m	
			; for (j = 2; j >= 0; j--)
			MOV		R7, #2		; R7 = j = 2
ini_f_j_m
			; En r5 se va a guardar el resultado de cada Resultado[i][j]
			MOV 	R5, #0
			; En r12 se va a guardar el valor de cada E[i][j]
			MOV		R12, #0
			; for (k = 2; k >= 0; k--)
			MOV		R8, #2
ini_f_k_m
			; A(r9) = i(r6) * 12 + k(r8) * 4 + @A(r0)
			MLA		R9, R10, R6, R0
			LDR 	R9, [R9, R8, LSL #2]
			; B(r11) = k(r8) * 12 + j(r7) * 4 + @B [r1] 
			MLA		R11, R10, R8, R1
			LDR		R11, [R11, R7, LSL #2]
			; Resultado[i][j] += A[i][k] * B[k][j] + Resultado[i][j]
			MLA		R5, R9, R11, R5

			; C y D se calculan directamente transpuestas para que al multiplicarlas se obtenga E transpuesta 
			; Para ello en vez de hacer E[i][j] += C[j][k] * D[k][i] + E[i][j] en vez de E[i][j] += C[i][k] * D[k][j] + E[i][j] 
			; C(r9) = j(r7) * 12 + k(r8) * 4 + @C(r2)
			MLA		R9, R10, R7, R2
			LDR 	R9, [R9, R8, LSL #2]
			; D(r11) = k(r8) * 12 + i(r6) * 4 + @D(r3) 
			MLA		R11, R10, R8, R3
			LDR		R11, [R11, R6, LSL #2]
			; E[i][j] += C[j][k] * D[k][i]	+ E[i][j]
			MLA		R12, R9, R11, R12
			
	   		SUBS 	R8, R8, #1	; R8--
			BPL		ini_f_k_m
			; fin_for_k
			
			ADD		R5, R5, R12 	; RESULTADO[i][j] + E[i][j]
			CMP 	R5, #0					; if (Resultado[i][j] == 0)
			SUBEQ	R14, R14, #1			    ; terminos_no_cero--

			MLA		R11, R10, R6, R4
			STR 	R5, [R11, R7, LSL #2]

			SUBS 	R7, R7, #1	; R7--
			BPL		ini_f_j_m
			; fin_for_j			
			SUBS 	R6, R6, #1	; R6--	
			BPL		ini_f_i_m	
			; fin_for_i

			; end multiplicar(A,B,Resultado) and multiplicar(C,D,E)

			MOV 	R0, R14
					
			; EP�LOGO
			LDMIA	SP!,{R4-R12,LR}
			BX		LR 

		END


        ;   THUMB
		;	Nekane Díaz Montoya	  870795	
		;	Jorge Hernández Aznar 872838
		AREA codigo, CODE,READONLY
		EXPORT matriz3x3_operar_THB
		PRESERVE8 {TRUE}
		ENTRY
matriz3x3_operar_THB
			; PRÓLOGO
			ARM
			STMDB 	SP!,{R4-R12,LR}	   ; Se guardan los registros antiguos y el link register para volver

			ADR		R4, ini_thumb + 1
			BX		R4

			THUMB
ini_thumb
			LDR 	R4, [SP, #40] 	   ; R12 = @Resultado , #40
			MOV		R12, R4			

			; No hace falta inicializar Resultado ni E si solo vamos a hacer stores en memoria
			; Movemos las direccion de las matrices a high registers
			MOV 	R8, R0				; movemos @A a r8
			MOV 	R9, R1				; movemos @B a r9
			MOV 	R10, R2				; movemos @C a r10
			MOV 	R11, R3				; movemos @D a r11

			; multiplicar(A,B,Resultado) and multiplicar(C,D,E)
			MOVS	R0, #0
			MOV		R14, R0		; R14 = terminos_no_cero
						
			; for (i = 2; i >= 0; i--)
			MOVS	R0, #2				; R0 = i = 2			
ini_f_i_m	
			; for (j = 2; j >= 0; j--)
			MOVS	R1, #2				; R1 = j = 2
ini_f_j_m
			; En r5 se va a guardar el resultado de cada Resultado[i][j]
			MOVS 	R5, #0
			; En r6 se va a guardar el valor de cada E[i][j]
			MOVS	R6, #0

			; for (k = 2; k >= 0; k--)
			MOVS	R2, #2	 			; R2 = k = 2
ini_f_k_m
			MOVS 	R7, #12
			; A(r3) = i(r0) * 12 + k(r2) * 4 + @A(r8)
			MOVS	R3, R0
			MULS 	R3, R7, R3			; r3 = i(r0, r3)*12(r7)
			; B(r4) = k(r8) * 12 + j(r7) * 4 + @B(r9) 
			MOVS	R4, R2
			MULS	R4, R7, R4			; r4 = k(r2, r4)*12(r7)


			ADD 	R3, R3, R8			; r3 = i(r3)*12(r7) + @A(r8)
			LSLS	R7, R2, #2			; r7 = 4 * k(r2)
			LDR		R3, [R3, R7]		; guarda lo que hay en la direccion de A apuntada en r3

			ADD		R4, R4, R9			; r4 = k(r2, r4)*12(r7)
			LSLS 	R7, R1, #2			; r7 = 4 * j(r1)
			LDR 	R4, [R4, R7]		; guarda lo que hay en la direccion de B apuntada en r4

			; Resultado[i][j] += A[i][k] * B[k][j] + Resultado[i][j]
			MULS 	R4, R3, R4			; r4 = A[i][j](r3) * B[i][j](r4)
			ADDS	R5, R5, R4			; r5 = r4 + Resultado[i][j]

			MOVS 	R7, #12
			; C(r3) = j(r1) * 12 + k(r2) * 4 + @C(r10)
			MOVS	R3, R1				 
			MULS 	R3, R7, R3			; r3 = i(r3, r0) * 12(r7)
			
			; D(r11) = k(r2) * 12 + i(r0) * 4 + @D(r11) 
			MOVS	R4, R2
			MULS	R4, R7, R4			; r4 = k(r4, r2) * 12(r7)
					
			ADD 	R3, R3, R10			; i(r3, r0) * 12(r7) + @C (r10)
			LSLS	R7, R2, #2			; r7 = 4 * k(r2)
			LDR		R3, [R3, R7]		; guarda lo que hay en la direccion de C apuntada en r3
			
			ADD		R4, R4, R11			; k(r4, r2) * 12(r7) + @D
			LSLS 	R7, R0, #2			; r7 = 4 * j(r1)
			LDR 	R4, [R4, R7]		; guarda lo que hay en la direccion de D apuntada en r4

			; E[i][j] += C[i][k] * D[k][j]	+ E[i][j]
			MULS 	R4, R3, R4			; r4 = C[i][j](r3) * D[i][j](r4)
			ADDS	R6, R6, R4			; r6 = r4 + E[i][j]

	   		SUBS 	R2, R2, #1	; R2--
			BPL		ini_f_k_m
			; fin_for_k
			MOVS 	R2, #1				; R2 = #1
			MOVS 	R7, #12
			
			ADDS	R5, R5, R6 			; Resultado[i][j] + E[i][j]
			CMP 	R5, #0				; if (Resultado[i][j] != 0){
			BEQ		es_cero
			ADD		R14, R14, R2		; terminos_no_cero++}

es_cero		MULS    R7, R0, R7			; R7 = i * 12 (porque cada fila tiene 12 bytes, 3 enteros de 4 bytes)
    		ADD     R7, R7, R12			; R7 = i * 12 + @Resultado (R12)
    		LSLS    R4, R1, #2			; R4 = j * 4 (columna multiplicada por 4 bytes por elemento)
   										; R7 = i * 12 + @Resultado + j * 4
    		STR     R5, [R7, R4]		; Almacena el valor en la dirección calculada
			
			SUBS 	R1, R1, #1			; R1--
			BPL		ini_f_j_m
			; fin_for_j			
			SUBS 	R0, R0, #1			; R0--	
			BPL		ini_f_i_m	
			; fin_for_i

			MOV 	R0, R14				; R0 = terminos_no_cero

			ADR 	R1, ini_arm
			BX		R1
			ARM
ini_arm			
			; EPÍLOGO
			LDMIA	SP!,{R4-R12, LR}
			BX		LR 

		END